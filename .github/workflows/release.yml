name: release
on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build-and-release:
    runs-on: ubuntu-22.04
    permissions:
      contents: write # needed to create/upload releases
    strategy:
      fail-fast: false
      matrix:
        include:
          - goos: linux # common server targets
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin # Apple Silicon + Intel
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: windows
            goarch: amd64

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Install Linux build deps
        if: ${{ matrix.goos == 'linux' }}
        run: |
          if [ "${{ matrix.goarch }}" = "arm64" ]; then
            sudo dpkg --add-architecture arm64
            sudo tee /etc/apt/sources.list.d/ubuntu-arm64.list > /dev/null <<'EOF'
deb [arch=arm64] http://ports.ubuntu.com/ jammy main restricted universe multiverse
deb [arch=arm64] http://ports.ubuntu.com/ jammy-updates main restricted universe multiverse
deb [arch=arm64] http://ports.ubuntu.com/ jammy-security main restricted universe multiverse
deb [arch=arm64] http://ports.ubuntu.com/ jammy-backports main restricted universe multiverse
EOF
          fi
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config
          if [ "${{ matrix.goarch }}" = "arm64" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu libasound2-dev:arm64
          else
            sudo apt-get install -y libasound2-dev
          fi

      - name: Derive version from tag
        id: meta
        run: |
          echo "version=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          VERSION: ${{ steps.meta.outputs.version }}
        run: |
          bin_name=naggo
          ext=""
          if [ "$GOOS" = "windows" ]; then ext=".exe"; fi
          out="dist/${bin_name}_${VERSION}_${GOOS}_${GOARCH}${ext}"
          mkdir -p dist
          if [ "$GOOS" = "linux" ]; then
            export CGO_ENABLED=1
            if [ "$GOARCH" = "arm64" ]; then
              export CC=aarch64-linux-gnu-gcc
              export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig:${PKG_CONFIG_PATH}
              export PKG_CONFIG_LIBDIR=/usr/lib/aarch64-linux-gnu/pkgconfig
              export CGO_LDFLAGS="-L/usr/lib/aarch64-linux-gnu"
            fi
          else
            export CGO_ENABLED=0
          fi
          go build -trimpath -ldflags "-s -w -X main.version=${VERSION}" -o "$out" .
          # zip each artifact to keep permissions & portability
          (cd dist && zip "${bin_name}_${VERSION}_${GOOS}_${GOARCH}.zip" "$(basename "$out")")

      - name: Checksums
        run: |
          cd dist
          sha256sum *.zip > SHA256SUMS

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.version }}
          name: ${{ steps.meta.outputs.version }}
          draft: false
          prerelease: false
          files: |
            dist/*.zip
            dist/SHA256SUMS
